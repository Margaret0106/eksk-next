{"version":3,"file":"static/webpack/static/development/pages/index.js.76085b25b2f2f785f024.hot-update.js","sources":["webpack:///./app/pages/MainPage/CheckKsk.js"],"sourcesContent":["import React, {Component} from 'react';\nimport classnames from 'classnames'\nimport Autosuggest from 'react-autosuggest';\nimport Icons from '../../components/Icons';\nimport 'isomorphic-fetch'\nimport _ from 'lodash'\nimport { dim } from '../../../node_modules/ansi-colors';\nimport smoothscroll from 'smoothscroll-polyfill'\n\n\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (data, value) => {\n  const inputValue = value\n    .trim()\n    .toLowerCase();\n  const inputLength = inputValue.length;  \n  return inputLength === 0\n    ? []\n    : data.filter(city => city.title.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input based on\n// the clicked suggestion. Teach Autosuggest how to calculate the input value\n// for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.title;\n\n// Use your imagination to render suggestions.\nlet renderSuggestion = suggestion => (\n  <div>\n    {suggestion.title}\n  </div>\n);\n\nclass CheckKsk extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputs = {\n      name: { error: false, success: false },\n      email: { error: false, success: false }      \n    }   \n    this.state = {\n      value: '',\n      cities: this.props.data.cities,\n      noMatchesMessage: false,\n      suggestions: [],\n      submitting: false,\n      submitted: false,\n      formData: {},\n      kskModalOpen: false,\n      states: this.inputs,\n      fetching: false,\n      ksk: null, \n      successKsk: false,\n      kskCityId: null\n    };\n    this.myRef = React.createRef();\n  }\n  setStatePromise = (state) => {\n      return new Promise((resolve) => {\n          this.setState(state, resolve)\n      })\n  }\n\n  hideKskModal = () => { \n      this.setState({ kskModalOpen: false }) \n  }\n\n  componentDidMount() {   \n    console.log('cities', this.state.cities)\n  }\n\n  onChange = (event, {newValue, method}) => {    \n    this.setState({value: newValue});\n    if (getSuggestions(this.state.cities, newValue).length) {\n      this.setState({noMatchesMessage: false})\n    }\n    else {\n      this.setState({noMatchesMessage: true})\n    }   \n    if (newValue.length == 0) {\n      this.setState({noMatchesMessage: false})\n    } \n  };\n\n  onBlur = (event, { highlightedSuggestion }) => {  \n    if (this.state.noMatchesMessage) {\n      this.setState({value: ''});  \n    }\n    this.setState({noMatchesMessage: false})\n  }; \n\n  // Autosuggest will call this function every time you need to update\n  // suggestions. You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({value}) => {   \n    this.setState({suggestions: getSuggestions(this.state.cities, value)});\n  };\n\n  onSuggestionSelected = (event, { method }) => {    \n    if (method === 'enter') {\n      event.preventDefault();\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({suggestions: []});\n  };  \n\n  _handleChange = (event) => {\n    const {formData} = this.state;\n        this.setState({\n            formData: {\n                ...formData,\n                [event.target.getAttribute('name')]: event.target.value\n            }          \n        },\n        function() {\n          \n        }\n      )\n  }\n\n\n  _handleSubmit = (event) => {\n    event.preventDefault(); \n    console.log('beforesend', this.state.value, this.state.formData.street)   \n    let city = encodeURI(this.state.value)\n    let street = encodeURI(this.state.formData.street)\n    let number = encodeURI(this.state.formData.house)\n    fetch(`https://dev.e-kck.kz/api/v1/landing/search/?city=${city}&street=${street}&number=${number}`, {\n      method: 'get',      \n      headers: {        \n        'Authorization': 'Bearer GZavaFROL7WLxUEISqQRv-9_9XHfG01N'                      \n      },     \n    }).then((res) => res.json()).then((data) => {\n      console.log('data', data);\n      \n      if(data.success) {\n        smoothscroll.polyfill();\n        let elmnt = document.getElementById('map');\n        elmnt.scrollIntoView({behavior:'smooth', block: 'start'});  \n        this.setState({ \n          kskModalOpen: true,      \n        })\n        if (data.data.ksk) {\n          this.setState({ \n            successKsk: true, \n            ksk: data.data.ksk.title,\n            kskCityId: data.data.city.id  \n          })\n        }\n        else {\n          console.log(this.state.cities)\n          // console.log('key', _.findKey(this.props.cities, { 'title': 'Астана'})  )\n          this.setState({ \n            successKsk: false, \n            ksk: null,\n            kskCityId: null\n          })     \n        }\n      }\n      else {\n        this.setState({ \n          kskModalOpen: false,      \n        })\n      }\n      \n      // data.data && data.data.ksk ?\n      //   this.setState({ \n      //     successKsk: true, \n      //     ksk: data.data.ksk.title,\n      //     kskCityId: data.data.city.id  \n      //   }) : this.setState({ \n      //     successKsk: false, \n      //     ksk: null,\n      //     kskCityId: null         \n      // }) \n      // data.data ?        \n      //   this.setState({           \n      //     kskModalOpen: true,          \n      //     // kskCityId: _.findKey(this.props.cities, { 'title': 'Астана'})\n      //   }) : this.setState({\n      //     kskModalOpen: false\n      //   })\n      console.log('kskModalOpen', this.state.kskModalOpen, this.state.ksk)\n    })\n  };\n\n  // submit (e) {\n  //   e.preventDefault()\n  //   const formData = new FormData(e.target)\n  //   console.log('data', formData)\n\n    // fetch(`http://dev.e-kck.kz/api/v1/landing/search`, {\n    //   method: 'get',\n    //   headers: {\n    //     'Accept': 'application/json, text/plain, */*',\n    //     'Content-Type': 'application/json'\n    //   },\n    //   body: JSON.stringify(data)\n    // }).then((res) => {\n    //   res.status === 200 ? this.setState({ submitted: true }) : ''\n    // })\n  // }\n\n  \n\n  render() {\n\n    const { formData,  update, loading, autoComplete} = this.state;\n    const { selectedOption, kskCityId, noMatchesMessage, kskModalOpen, states, fetching, value, suggestions, ksk, successKsk } = this.state\n    const inputClasses = _.mapValues(states, ({ error, success }) => (classnames('input-container', { error: error, success: success })))\n    const buttonClass = classnames({ fetching: fetching })\n\n    const inputProps = {\n      placeholder: 'Город',\n      name: 'city',\n      value,\n      className: 'form-control',\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      autoComplete: 'off'\n    };    \n\n    return (\n      <section className=\"section section5\">\n        <div className=\"map\" id=\"map\">\n          <img src=\"/static/images/map.png\" alt=\"\"/>\n            <div className={ classnames(\n                'ksk-modal',\n                { 'ksk-modal--open': kskModalOpen == true},\n                { 'ksk-modal--success': successKsk == true, 'ksk-modal--error': successKsk == false},\n                { [`ksk-modal--city${kskCityId}`] : this.state.kskCityId}\n              ) }>\n              {\n                successKsk ? (\n                  <div>\n                    <p>КСК «{ksk}» <br/><span>работает</span>  с приложением</p>                \n                    <div className=\"app-links app-links--dark\">\n                      <a href=\"\" className=\"app-link\">\n                        {Icons('apple')}\n                        App Store\n                      </a>\n                      <a href=\"\" className=\"app-link\">\n                        {Icons('google')}\n                        Google Play\n                      </a>\n                    </div>\n                  </div>                  \n              ) :\n              ( \n                <div>\n                  <p>Ваш КСК  <br/><span>не работает</span>  с приложением</p>\n                </div>                \n              )\n            }   \n            </div>\n        </div>\n        <div className=\"check-form\">\n          <p>Проверьте поддержку\n            <br/>приложения в вашем КСК</p>\n          <form className=\"form-inline\" onSubmit={ this._handleSubmit }>\n            <div className=\"form-group form-group--medium\">             \n              <Autosuggest \n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                onSuggestionSelected={this.onSuggestionSelected}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}                 \n                />\n                {noMatchesMessage && \n                  <div className=\"no-matches\">Города нет в списке</div>\n                } \n            </div>\n            <div className=\"form-group\">\n              <input name='street'\n                     type=\"text\" \n                     className=\"form-control\" \n                     id=\"\" \n                     placeholder=\"Улица\"\n                     onChange={this._handleChange}/>\n            </div>\n            <div className=\"form-group form-group--small\">\n              <input name='house'\n                     type=\"text\" \n                     className=\"form-control\" \n                     id=\"\" \n                     placeholder=\"Дом\"\n                     onChange={this._handleChange}/>\n            </div>\n\n            <button type=\"submit\" disabled={ fetching } className=\"btn btn--primary\">Проверить</button>\n          </form>\n\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default CheckKsk"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwBA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AAAA;AAAA;AACA;AACA;AAhCA;AAqCA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAjDA;AAkDA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxDA;AA2DA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9DA;AA+DA;AACA;AAAA;AACA;AACA;AACA;AACA;AApEA;AAuEA;AAAA;AAAA;AACA;AACA;AAzEA;AA0EA;AACA;AACA;AACA;AADA;AAUA;AACA;AAvFA;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAvJA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AArBA;AAsBA;AACA;;;AAUA;AACA;AACA;;;AAuHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAHA;AAUA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAeA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AAMA;;;;AA3QA;AACA;AA6QA;;;;A","sourceRoot":""}