{"version":3,"file":"static/webpack/static/development/pages/index.js.34a69bf99389325cfac7.hot-update.js","sources":["webpack:///./app/components/Form.js"],"sourcesContent":["import React, {Component} from 'react'\nimport Icons from './Icons';\nimport classnames from 'classnames';\nimport getFormData from '../utils/getFormData'\nimport {connect} from 'react-redux';\nimport 'isomorphic-fetch'\nimport {Field, reduxForm, reset, SubmissionError} from 'redux-form'\n\nconst validate = values => {\n  \n  const errors = {}\n  if (!values.city) {\n    errors.city = 'Не ввели город'\n  }\n  if (!values.email) {\n    errors.email = 'Не ввели почту'\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Неправильно ввели почту'\n  }\n  if (!values.street) {\n    errors.street = 'Не ввели улицу'\n  }\n  return errors\n}\n\n\nconst InputHalf = ({\n  input,\n  label,\n  type,\n  placeholder,\n  meta: {\n    touched,\n    error\n  }\n}) => (\n  <div\n    className={classnames('form-group form-group--half', {\n    error: touched && error,\n    success: touched && !error\n  })}>\n    <input\n      {...input}\n      type={type}\n      className=\"form-control\"\n      placeholder={placeholder}/> \n  </div>\n)\n\nconst Input = ({\n  input,\n  label,\n  type,\n  placeholder,\n  meta: {\n    touched,\n    error\n  }\n}) => {\n\n  console.log('meta', {touched, error})\n  \n  return (\n\n  <div\n    className={classnames('form-group', {\n    error: touched && error,\n    success: touched && !error\n  })}>\n    <input\n      {...input}\n      type={type}\n      className=\"form-control\"\n      placeholder={placeholder}/>\n  </div>\n)}\n\nclass FeedbackForm extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n        successModalOpen: false,\n        fetching: false,\n        successMessage: null\n    }\n  }\n\n  componentWillReceiveProps () {\n    // console.log ('componentWillReceiveProps', this.props)\n  }\n\n  _handleSubmit = (values) => {\n    \n    // event.preventDefault();\n    //console.log('onsubmit', this.props)\n    const { dispatch, form, stop } = this.props\n    const formData = values\n    //console.log('formData', JSON.stringify(formData))\n\n    fetch(`http://eksk-landing.rocketfirm.net/api/v1/feedback/create`, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer GZavaFROL7WLxUEISqQRv-9_9XHfG01N',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: getFormData(formData)\n    }).then((res) => res.json()).then((data) => {\n      //console.log('data', data);\n      if (data.success) {\n        this.setState({\n          successMessage: 'Заявка успешно отправлена'\n        }, function() {\n          setTimeout(() => {\n            dispatch(reset(form))\n            this.setState({\n              successMessage: null\n            })\n          }, 3000);\n        }) \n        \n        \n      } else {\n\n      } \n        \n    })\n  };\n  render () {    \n    const {handleSubmit, pristine, reset, submitting, errors, isTouched} = this.props    \n    \n    return (\n      <form className=\"form-transparent form-flex\" onSubmit={handleSubmit(this._handleSubmit)}>\n        <Field name=\"email\" type=\"email\" component={InputHalf} placeholder=\"Почта\"/>\n        <Field name=\"city\" type=\"text\" component={InputHalf} placeholder=\"Город\"/>\n        <Field name=\"street\" type=\"text\" component={Input} placeholder=\"Улица\"/>        \n        <button type=\"submit\" disabled={submitting} className=\"btn btn--transparent\">Отправить заявку {Icons('arrow')}\n        </button>     \n        <div className=\"form-messages\">           \n          {isTouched && errors &&\n            Object.keys(errors).map((item, i) => ( \n              <div className=\"error-message\" key={i}>{errors[item]}</div>               \n            ))\n          }  \n          {this.state.successMessage && \n            <div className=\"success-message\">{this.state.successMessage}</div>\n          }          \n        </div>   \n      </form>\n    )\n  }  \n}\n\nconst mapStateToProps = state => { \n  const {\n    form: {\n      syncValidation: {\n        syncErrors,\n        fields\n      }\n    }\n  } = state\n  const errors = syncErrors ? Object.keys(syncErrors).reduce((carry, key) => {\n    const item = syncErrors[key]\n    if (fields && fields[key]) {\n      if (!fields[key].active && (fields[key].visited || fields[key].touched)) {\n        carry[key] = item\n      }\n    }\n    return carry\n  }, {}) : {}\n  return {\n    errors,\n    isTouched:  state.form.syncValidation.anyTouched\n  };\n};\n\nexport default reduxForm({\n  form: 'syncValidation', // a unique identifier for this form\n  validate // <--- validation function given to redux-form\n})(connect(mapStateToProps)(FeedbackForm))\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AAJA;AAfA;AACA;AAsBA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAeA;AACA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AAAA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAGA;AAIA;AACA;AACA;AA/CA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AAEA;;;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AAKA;;;;AAzEA;AACA;AA2EA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAHA;;;;A","sourceRoot":""}